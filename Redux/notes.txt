Redux - state management system (Udemy - Max)

Redux is a pattern and LIBRARY for managing and updating application state 
For that we use events called actions

Redux provides us with global state and lets us update it

Component - event - dispatch - action - reducer updates the store (global state) based of the action - all the subscribed components are updated

npm install redux react-redux

Store in index.js - we are letting react know that the whole app will be using that store

We then connect store with our rootReducer function

In a rootReducer we combine all the other reducers - import combineReducers from redux and import all the reducers we want to combine and then:

const rootReducer = combineReducers({
  todosReducer,
  filterReducer,
});

Each reducer takes a state and an action. Based on the content of the action object it updates the state in a store

If we want to subscribe component to a store we need to import connect method from 'react-redux'
Now under container we need to create two functions: mapStateToProps and mapDispatchToProps that do exactly that.

const mapStateToProps = (state) => {
    return {
        text: state.text -> Here we list props we want to pass to component we want to suscribe and we map it to a store state
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        someFunction : (args) => {
            dispatch{
                type: 'ACTION_TYPE',
                payload: 'stuff needed to update the store state'
            }
        }
    }
}

export default connect(mapStateToProps , mapDispatchToProps)(Component) - like this we call connect method that returns a function and we call with passing the Component 